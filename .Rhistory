# variable with classification values
ch_a$CH_unit <- as.factor(ch_a$CH_unit)
# create a training and testing set:
prop <- 0.7  # train with prop of the data, test with 1-prop
ch_a$rand <-  runif(nrow(ch_a), 0, 1)
ch_a_train <-  ch_a[ch_a$rand < prop,]
ch_a_test <-  ch_a[ch_a$rand >= prop,]
# remove random col
ch_a_train$rand <- NULL
ch_a_test$rand <- NULL
all_models_output <-
map(all_models, ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models <- unique(classification_models$model)[1] # test-run with a small set
library(purrr)
train_safe <- safely(train)
all_models_output <-
map(all_models, ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output
all_models <- unique(classification_models$model)[c(1,2)] # test-run with a small set
library(purrr)
train_safe <- safely(train)
all_models_output <-
map(all_models, ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output
all_models <- unique(classification_models$model)[c(1,2,3)] # test-run with a small set
library(purrr)
train_safe <- safely(train)
all_models_output <-
map(all_models, ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output
all_models <- unique(classification_models$model)[c(1:4)] # test-run with a small set
library(purrr)
train_safe <- safely(train)
all_models_output <-
map(all_models, ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models <- unique(classification_models$model)[c(1:3,5)] # test-run with a small set
library(purrr)
train_safe <- safely(train)
all_models_output <-
map(all_models, ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models <- unique(classification_models$model) # test-run with a small set
library(purrr)
train_safe <- safely(train)
all_models_output <-
map(all_models[c(1:3,5)], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output
all_models_output <-
map(all_models[c(1:3,6)], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output
all_models_output <-
map(all_models[c(1:3,7)], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output
all_models_output <-
map(all_models[c(1:3,7:8)], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
install.packages("pcaPP")
all_models_output <-
map(all_models[8], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models[8]
all_models_output <-
map(all_models[8], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output <-
map(all_models[9], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output <-
map(all_models[9], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output
all_models_output <-
map(all_models[10], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output <-
map(all_models[11], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output <-
map(all_models[12], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output
all_models_output <-
map(all_models[12], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output <-
map(all_models[12], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output
all_models_output <-
map(all_models[13], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
install.packages("SDDA")
all_models_output <-
map(all_models[14], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output <-
map(all_models[15], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
install.packages("prodlim")
all_models_output
all_models_output <-
map(all_models[15], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output
all_models_output <-
map(all_models[16], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output
all_models_output <-
map(all_models[17], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output
all_models_output <-
map(all_models[18], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output
all_models[18]
all_models_output <-
map(all_models[17], ~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models[17]
all_models
all_models_output <-
map(all_modelsc(1:3, 7:9, 12, 15:16),
~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output <-
map(all_models[c(1:3, 7:9, 12, 15:16)],
~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output
all_models_output[[1]]
all_models_output[[1]]$result
all_models_output[[1]]$result$results
all_models_output[[1]]$result$results$Accuracy
map(all_models_output, ~.x$result$results$Accuracy)
map_dbl(all_models_output, ~.x$result$results$Accuracy)
all_models_output <-
map(all_models[c(1:3, 7, 9, 12, 15:16)],
~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
map_dbl(all_models_output, ~.x$result$results$Accuracy)
all_models[c(1:3, 7, 9, 12, 15:16)]
all_models <- unique(classification_models$model)[c(1:3, 7, 9, 12, 15:16)] # test-run with a small set
all_models
classification_models
control <- trainControl(method="repeatedcv", number=20, repeats=5)
caret_models <- modelLookup()
classification_models <- caret_models[caret_models$forClass == TRUE &
caret_models$probModel== TRUE &
caret_models$parameter== "parameter"  , ]
all_models <- unique(classification_models$model)[c(1:3, 7, 9, 12, 15:16)] # test-run with a small set
library(purrr)
train_safe <- safely(train)
all_models_output <-
map(all_models,
~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
map_dbl(all_models_output, ~.x$result$results$Accuracy)
all_models
caret_models
classification_models <- caret_models[caret_models$forClass == TRUE|FALSE &
caret_models$probModel== TRUE &
caret_models$parameter== "parameter"  , ]
classification_models
all_models <- unique(classification_models$model)[c(1:3, 7, 9, 12, 15:16)] # test-run with a small set
all_models
all_models_output <-
map(all_models,
~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
classification_models <- caret_models[caret_models$forClass == TRUE &
caret_models$probModel== TRUE &
caret_models$parameter== "parameter"  , ]
all_models <- unique(classification_models$model)[c(1:3, 7, 9, 12, 15:16)] # test-run with a small set
library(purrr)
train_safe <- safely(train)
all_models_output <-
map(all_models,
~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models
View([1] "bayesglm"  "C5.0Rules" "C5.0Tree"  "lda"       "OneR"      "rpart1SE"
[7] "slda"      "treebag" )
View(caret_models
)
caret_models
caret_models$model
classification_models <- caret_models$model[1:10]
library(purrr)
train_safe <- safely(train)
all_models_output <-
map(all_models,
~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
all_models_output <- list(length = length(classification_models))
all_models_output
all_models_output <- list(length(classification_models))
all_models_output
all_models_output <- list(classification_models)
all_models_output
all_models_output <- vector("list", length = classification_models)
all_models_output <- vector("list", length = length(classification_models))
all_models_output
all_models
seq_along(all_models)
all_models
all_models_output <- vector("list", length = length(classification_models))
for(i in seq_along(all_models)){
message(paste0("Now running ", all_models[i], " model...")
all_models_output[[i]] <-
train_safe(CH_unit ~ .,
data = ch_a_train,
method= all_models[i],
trControl=control)
message(paste0("This is the ", [i], "th model of ", length(all_models), " models.")
}
map(all_models,
~train_safe(CH_unit ~ .,
data = ch_a_train,
method=.x,
trControl=control))
message(paste0("This is the ", [i], "th model of ", length(all_models), " models."))
message(paste0("This is the ", i, "th model of ", length(all_models), " models."))
all_models_output <- vector("list", length = length(classification_models))
for(i in seq_along(all_models)){
message(paste0("Now running ", all_models[i], " model..."))
all_models_output[[i]] <-
train_safe(CH_unit ~ .,
data = ch_a_train,
method= all_models[i],
trControl=control)
message(paste0("This is the ", i, "th model of ", length(all_models), " models."))
}
all_models_output
all_models
classification_models <- caret_models$model[1:50]
library(purrr)
train_safe <- safely(train)
all_models_output <- vector("list", length = length(classification_models))
for(i in seq_along(all_models)){
message(paste0("Now running ", all_models[i], " model..."))
all_models_output[[i]] <-
train_safe(CH_unit ~ .,
data = ch_a_train,
method= all_models[i],
trControl=control)
message(paste0("This is model ", i, " of ", length(all_models), " models."))
}
all_models_output
all_models
classification_models
all_models <- caret_models$model[1:50]
library(purrr)
train_safe <- safely(train)
all_models_output <- vector("list", length = length(classification_models))
for(i in seq_along(all_models)){
message(paste0("Now running ", all_models[i], " model..."))
all_models_output[[i]] <-
train_safe(CH_unit ~ .,
data = ch_a_train,
method= all_models[i],
trControl=control)
message(paste0("This is model ", i, " of ", length(all_models), " models."))
}
all_models <- caret_models$model[1:3, 5:50]
all_models <- caret_models$model[c(1:3, 5:50),]
caret_models$model[c(1:3, 5:50),]
all_models <- caret_models$model[c(1:3, 5:50)]
library(purrr)
train_safe <- safely(train)
all_models_output <- vector("list", length = length(classification_models))
for(i in seq_along(all_models)){
message(paste0("Now running ", all_models[i], " model..."))
all_models_output[[i]] <-
train_safe(CH_unit ~ .,
data = ch_a_train,
method= all_models[i],
trControl=control)
message(paste0("This is model ", i, " of ", length(all_models), " models."))
}
all_models <- caret_models$model[c(1:2, 4:50)]
library(purrr)
train_safe <- safely(train)
all_models_output <- vector("list", length = length(classification_models))
for(i in seq_along(all_models)){
message(paste0("Now running ", all_models[i], " model..."))
all_models_output[[i]] <-
train_safe(CH_unit ~ .,
data = ch_a_train,
method= all_models[i],
trControl=control)
message(paste0("This is model ", i, " of ", length(all_models), " models."))
}
all_models <- caret_models$model[c(1, 4:50)]
library(purrr)
train_safe <- safely(train)
all_models_output <- vector("list", length = length(classification_models))
for(i in seq_along(all_models)){
message(paste0("Now running ", all_models[i], " model..."))
all_models_output[[i]] <-
train_safe(CH_unit ~ .,
data = ch_a_train,
method= all_models[i],
trControl=control)
message(paste0("This is model ", i, " of ", length(all_models), " models."))
}
all_models <- caret_models$model[c(4:50)]
library(purrr)
train_safe <- safely(train)
all_models_output <- vector("list", length = length(classification_models))
for(i in seq_along(all_models)){
message(paste0("Now running ", all_models[i], " model..."))
all_models_output[[i]] <-
train_safe(CH_unit ~ .,
data = ch_a_train,
method= all_models[i],
trControl=control)
message(paste0("This is model ", i, " of ", length(all_models), " models."))
}
caret_models$model
mio <- c("xgboost", "gbm", "ctree", "rpart", "rpart2", "gamboost", "treebag", "rf", "amdai")
caret_models$model[mio]
mio
all_models <- mio
library(purrr)
train_safe <- safely(train)
all_models_output <- vector("list", length = length(classification_models))
for(i in seq_along(all_models)){
message(paste0("Now running ", all_models[i], " model..."))
all_models_output[[i]] <-
train_safe(CH_unit ~ .,
data = ch_a_train,
method= all_models[i],
trControl=control)
message(paste0("This is model ", i, " of ", length(all_models), " models."))
}
all_models_output
mio <- c("xgboost", "gbm", "ctree", "rpart", "rpart2", "gamboost", "treebag", "rf", "lda", "amdai", "binda", "dda", "hda", "hdda", "stepLDA", "mda", "qda", "rda", "Linda", "sda", "bayesglm", "glm", "logicBag", "bayesglm" "ORFridge", "svmLinearWeights2")
mio <- c("xgboost", "gbm", "ctree", "rpart", "rpart2", "gamboost", "treebag", "rf", "lda", "amdai", "binda", "dda", "hda", "hdda", "stepLDA", "mda", "qda", "rda", "Linda", "sda", "bayesglm", "glm", "logicBag", "bayesglm" "ORFridge", "svmLinearWeights2")
all_models <- mio
library(purrr)
train_safe <- safely(train)
all_models_output <- vector("list", length = length(all_models))
for(i in seq_along(all_models)){
message(paste0("Now running ", all_models[i], " model..."))
all_models_output[[i]] <-
train_safe(CH_unit ~ .,
data = ch_a_train,
method= all_models[i],
trControl=control)
message(paste0("This is model ", i, " of ", length(all_models), " models."))
}
mio <- c("xgboost", "gbm", "ctree", "rpart", "rpart2", "gamboost", "treebag", "rf", "lda", "amdai", "binda", "dda", "hda", "hdda", "stepLDA", "mda", "qda", "rda", "Linda", "sda", "bayesglm", "glm", "logicBag", "logreg", "bayesglm", "bridge", "ORFridge", "svmLinearWeights2", "lssvmLinear")
all_models_output
map_dbl(all_models_output, ~.x$result$results$Kappa)
all_models_output
map_dbl(all_models_output, ~ifelse(is.null(.x), NA, .x$result$results$Kappa))
is.null()
x <- NULL
x
length(x)
map_dbl(all_models_output, ~ifelse(length(.x) == 0, NA, .x$result$results$Kappa))
map_dbl(all_models_output, ~ifelse(length(.x) == 0,
NA,
.x$$results$Kappa))
map_dbl(all_models_output, ~ifelse(length(.x) == 0,
NA,
.x$results$Kappa))
all_models_output[[1]]$result$Kappa
all_models_output[[1]]$result
all_models_output[[1]]
all_models_output[[2]]$result
all_models_output[[2]]$result$results
all_models_output[[2]]$result$results$Kappa
map(all_models_output, ~ifelse(length(.x) == 0,
NA,
.x$results$Kappa))
map(all_models_output, ~ifelse(length(.x) == 0,
NA,
.x$results$results$Kappa))
map(all_models_output, ~ifelse(length(.x$results) == 0,
NA,
.x$results$results$Kappa))
map(all_models_output, ~ifelse(length(.x$result) == 0,
NA,
.x$results$results$Kappa))
ifelse(all_models_output[[2]]$result$results$Kappa
ifelse(all_models_output[[2]]$result$results$Kappa
ifelse(all_models_output[[2]]$result$results
ifelse(all_models_output[[2]]$result
all_models_output[[2]]$result
all_models_output[[2]]$result$results$Kappa
all_models_output[[2]]$result
all_models_output[[1]]$result
length(all_models_output[[1]]$result)
length(all_models_output[[2]]$result)
length(all_models_output[[3]]$result)
map(all_models_output, ~ifelse(length(.x$result) == 0,
NA,
.x$results$results$Kappa))
all_models_output
map(all_models_output, ~.x$result)
mio <- c("xgboost", "gbm", "ctree", "rpart", "rpart2", "gamboost", "treebag", "rf", "lda", "amdai", "binda", "dda", "hda", "hdda", "stepLDA", "mda", "qda", "rda", "Linda", "sda", "bayesglm", "glm", "logicBag", "logreg", "bayesglm", "bridge", "ORFridge", "svmLinearWeights2", "lssvmLinear")
all_models <- mio
library(purrr)
train_safe <- safely(train)
all_models_output <- vector("list", length = length(all_models))
for(i in seq_along(all_models)){
message(paste0("Now running ", all_models[i], " model..."))
all_models_output[[i]] <-
train_safe(CH_unit ~ .,
data = ch_a_train,
method= all_models[i],
trControl=control)
message(paste0("This is model ", i, " of ", length(all_models), " models."))
}
all_models_output
map(all_models_output, ~.x$result)
all_models_output[[1]]$result$results
all_models_output[[2]]$result$results
Sys.Date()
mtcars
ggplot(mtcars,
aes(mpg,
disp)) +
geom_point() +
geom_smooth()
```{r cars, echo=FALSE, fig.height=3, fig.width=3, message=FALSE, warning=FALSE}
ggplot(mtcars,
aes(mpg,
disp)) +
geom_point(size = 3) +
geom_smooth() +
theme_bw()
setwd("E:/My Documents/My Papers/conferences/BIDS_book_2017")
